import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as o,a as e,b as n,d as r,e as i,r as l}from"./app.cb9162f6.js";const c={},d=e("h1",{id:"frontmatter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#frontmatter","aria-hidden":"true"},"#"),n(" Frontmatter")],-1),p={href:"https://github.com/jonschlinkert/gray-matter",target:"_blank",rel:"noopener noreferrer"},u=i(`<div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Docs with VitePress
<span class="token key atrule">editLink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="token punctuation">---</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Between the triple-dashed lines, you can set <a href="../config/frontmatter-configs">predefined variables</a>, or even create custom ones of your own. These variables can be used via the special <code>$frontmatter</code> variable.</p><p>Here\u2019s an example of how you could use it in your Markdown file:</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Docs with VitePress
<span class="token key atrule">editLink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="token punctuation">---</span></span>

<span class="token title important"><span class="token punctuation">#</span> {{ $frontmatter.title }}</span>

Guide content
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="alternative-frontmatter-formats" tabindex="-1"><a class="header-anchor" href="#alternative-frontmatter-formats" aria-hidden="true">#</a> Alternative Frontmatter Formats</h2><p>VitePress also supports JSON frontmatter syntax, starting and ending in curly braces:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>---
<span class="token punctuation">{</span>
  <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Blogging Like a Hacker&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;editLink&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
---
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function m(v,k){const a=l("ExternalLinkIcon");return t(),o("div",null,[d,e("p",null,[n("Any Markdown file that contains a YAML frontmatter block will be processed by "),e("a",p,[n("gray-matter"),r(a)]),n(". The frontmatter must be at the top of the Markdown file, and must take the form of valid YAML set between triple-dashed lines. Example:")]),u])}const h=s(c,[["render",m],["__file","frontmatter.html.vue"]]);export{h as default};
